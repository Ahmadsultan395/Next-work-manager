(()=>{var e={};e.id=543,e.ids=[543],e.modules={56037:e=>{"use strict";e.exports=require("mongoose")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},10701:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>w,routeModule:()=>y,serverHooks:()=>m,workAsyncStorage:()=>k,workUnitAsyncStorage:()=>f});var s={};r.r(s),r.d(s,{DELETE:()=>g,GET:()=>l,PUT:()=>p});var a=r(42706),n=r(28203),o=r(45994),i=r(85473),d=r(20929),c=r(39187),u=r(97887);async function l(e,{params:t}){await (0,u.X)();let{taskId:r}=t,s=await d.Z.findById(r);return c.NextResponse.json(s)}async function p(e,{params:t}){await (0,u.X)();let{taskId:r}=await t;console.log(r);let{title:s,content:a,status:n}=await e.json();try{let e=await d.Z.findById(r);if(console.log(e,"task from db"),!e)return(0,i.A)("Task not found",404,!1);return e.title=s,e.content=a,e.status=n,await e.save(),(0,i.A)("Task updated successfully",201,!0)}catch(e){return console.log(e),console.log(e),(0,i.A)("Task updated failed",404,!1)}}async function g(e,{params:t}){await (0,u.X)();let{taskId:r}=t;try{return await d.Z.findByIdAndDelete(r),(0,i.A)("Task deleted successfully",201,!0)}catch(e){return(0,i.A)("Task deleted failed",404,!1)}}let y=new a.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/tasks/[taskId]/route",pathname:"/api/tasks/[taskId]",filename:"route",bundlePath:"app/api/tasks/[taskId]/route"},resolvedPagePath:"F:\\nextjs\\net-work-manager\\src\\app\\api\\tasks\\[taskId]\\route.js",nextConfigOutput:"",userland:s}),{workAsyncStorage:k,workUnitAsyncStorage:f,serverHooks:m}=y;function w(){return(0,o.patchFetch)({workAsyncStorage:k,workUnitAsyncStorage:f})}},96487:()=>{},78335:()=>{},97887:(e,t,r)=>{"use strict";r.d(t,{X:()=>n});var s=r(56037),a=r.n(s);let n=async()=>{try{if(a().connections[0].readyState){console.log(a().connections[0].readyState),console.log("Already connected to MongoDB");return}await a().connect(process.env.MONGO_DB_URL,{dbName:"work-manager"},{useNewUrlParser:!0,useUnifiedTopology:!0}),console.log("MongoDB connected")}catch(e){throw console.error("MongoDB connection error:",e),Error("Database connection failed")}};n()},85473:(e,t,r)=>{"use strict";r.d(t,{A:()=>a});var s=r(39187);let a=(e,t,r)=>s.NextResponse.json({success:r,message:e},{status:t})},20929:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});var s=r(56037),a=r.n(s);let n=new(a()).Schema({title:{type:String,required:!0},content:{type:String,required:!0},status:{type:String,enum:["pending","in progress","completed","cancelled"],default:"pending"},userId:{type:a().Schema.Types.ObjectId,ref:"User",required:!0},addTime:{type:Date,default:Date.now}}),o=a().models.Task||a().model("Task",n)}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[638,452],()=>r(10701));module.exports=s})();